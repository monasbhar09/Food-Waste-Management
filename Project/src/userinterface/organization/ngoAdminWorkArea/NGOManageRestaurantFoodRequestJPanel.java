/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.organization.ngoAdminWorkArea;

import business.order.foodOffer.FoodOfferOrder;
import business.order.foodOffer.FoodOfferOrderItem;
import business.organization.NGOOrganization;
import business.userAccount.UserAccount;
import business.workQueue.FoodOfferWorkRequest;
import business.workQueue.StatusEnum;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class NGOManageRestaurantFoodRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOManageRestaurantFoodRequestJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private NGOOrganization nGOOrganization;
    private FoodOfferOrder foodOfferOrder;
    private boolean isCheckedOut = false;

    public NGOManageRestaurantFoodRequestJPanel(JPanel userProcessContainer, UserAccount userAccount, NGOOrganization nGOOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.nGOOrganization = nGOOrganization;
        populateDonationTable();
        if (!isCheckedOut) {
            foodOfferOrder = new FoodOfferOrder();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        donationTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        quantityjSpinner = new javax.swing.JSpinner();
        addBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        acceptRequestJTable = new javax.swing.JTable();
        checkOutBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        donationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Grocery Store"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(donationTable);

        jLabel3.setText("Select Quantity:");

        quantityjSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        addBtn.setText("Add to Cart");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        acceptRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(acceptRequestJTable);

        checkOutBtn.setText("Accept Request");
        checkOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("My Cart:");

        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Restaurant Food Request");

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(quantityjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(57, 57, 57)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel1))
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(checkOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(quantityjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(checkOutBtn)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = donationTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }

        FoodOfferWorkRequest selectedProduct = (FoodOfferWorkRequest) donationTable.getValueAt(selectedRow, 2);
        int fetchQty = (Integer) quantityjSpinner.getValue();
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be less than or equal to zero.");
            return;
        }

        try {
            int tempQuantity = 0;
            for (FoodOfferOrderItem oi : foodOfferOrder.getFoodOfferOrderItemList()) {
                if (oi.getFoodOfferWorkRequest() == selectedProduct) {
                    tempQuantity = oi.getQuantity();
                    break;
                }
            }
            if (fetchQty <= (selectedProduct.getAvailQuantity() - tempQuantity)) {
                boolean alreadyPresent = false;
                for (FoodOfferOrderItem oi : foodOfferOrder.getFoodOfferOrderItemList()) {
                    if (oi.getFoodOfferWorkRequest() == selectedProduct) {
                        oi.setQuantity(fetchQty + oi.getQuantity());
                        alreadyPresent = true;
                        populateDonationTable();
                        refreshAcceptRequestJTable();
                        break;
                    }
                }
                if (!alreadyPresent) {
                    foodOfferOrder.addFoodOfferOrderItem(selectedProduct, fetchQty);
                    populateDonationTable();
                    refreshAcceptRequestJTable();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Quantity > Availablity.", "WARNING", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid quantity.");
            return;
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void checkOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutBtnActionPerformed
        // TODO add your handling code here:
        if (foodOfferOrder.getFoodOfferOrderItemList().size() > 0) {
            nGOOrganization.getFoodOfferMasterOrderCatalog().addOrder(foodOfferOrder);
            JOptionPane.showMessageDialog(null, "Accepted donation successfully!");
            for (FoodOfferOrderItem oi : foodOfferOrder.getFoodOfferOrderItemList()) {
                int availQty = oi.getFoodOfferWorkRequest().getAvailQuantity() - oi.getQuantity();
                oi.getFoodOfferWorkRequest().setAvailQuantity(availQty);
                oi.getFoodOfferWorkRequest().getReceiverList().add(nGOOrganization);
                if(availQty==0)
                    oi.getFoodOfferWorkRequest().setStatus(StatusEnum.Unavailable);
                else
                    oi.getFoodOfferWorkRequest().setStatus(StatusEnum.RestaurantToSell);
            }
            foodOfferOrder = new FoodOfferOrder();
            nGOOrganization.getFoodOfferWorkQueue().getFoodOfferWorkRequestList().clear();
            refreshAcceptRequestJTable();
            populateDonationTable();
            isCheckedOut = true;
            return;
        }
        JOptionPane.showMessageDialog(null, "Your cart is empty!.", "WARNING", JOptionPane.WARNING_MESSAGE);
        return;
    }//GEN-LAST:event_checkOutBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable acceptRequestJTable;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton checkOutBtn;
    private javax.swing.JTable donationTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner quantityjSpinner;
    // End of variables declaration//GEN-END:variables

    private void populateDonationTable() {
        DefaultTableModel model = (DefaultTableModel) donationTable.getModel();

        model.setRowCount(0);
        for (FoodOfferWorkRequest workRequest : nGOOrganization.getFoodOfferWorkQueue().getFoodOfferWorkRequestList()) {
            workRequest.checkExpired();
            Object[] row = new Object[3];
            row[0] = workRequest.getProduct();
            row[1] = workRequest.getAvailQuantity();
            row[2] = workRequest;
            model.addRow(row);
        }

    }

    private void refreshAcceptRequestJTable() {
        DefaultTableModel dtm = (DefaultTableModel) acceptRequestJTable.getModel();
        dtm.setRowCount(0);
        for (FoodOfferOrderItem oi : foodOfferOrder.getFoodOfferOrderItemList()) {
            {
                Object[] row = new Object[2];
                row[0] = oi.getFoodOfferWorkRequest().getProduct();
                row[1] = oi.getQuantity();
                dtm.addRow(row);
            }
        }
    }

}
