/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.organization.householdWorkArea;

import business.enterprise.Enterprise;
import business.organization.HouseholdOrganization;
import business.organization.Organization;
import business.organization.RestaurantOrganization;
import business.order.uglyGrocery.FoodOfferOrder;
import business.order.uglyGrocery.UglyGroceryOrderItem;
import business.workQueue.StatusEnum;
import business.workQueue.UglyGroceryWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class HouseholdOrderGroceryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HouseholdOrderGroceryJPanel
     */
    private JPanel userProcessContainer;
    private HouseholdOrganization householdOrganization;
    private FoodOfferOrder uglyGroceryOrder;
    private Enterprise enterprise;
    private boolean isCheckedOut = false;

    public HouseholdOrderGroceryJPanel(JPanel userProcessContainer, HouseholdOrganization householdOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.householdOrganization = householdOrganization;
        this.enterprise = enterprise;
        if (!isCheckedOut) {
            uglyGroceryOrder = new FoodOfferOrder();
        }
        populateUglyGroceryTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkOutBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        uglyGroceryTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        quantityjSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartJTable = new javax.swing.JTable();

        checkOutBtn.setText("Check out");
        checkOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Quantity:");

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Order Grocery");

        uglyGroceryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Price", "Grocery Store"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(uglyGroceryTable);

        addBtn.setText("Add to Cart");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        quantityjSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel2.setText("My Cart:");

        cartJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(54, 54, 54)
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(66, 66, 66)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(28, 28, 28)
                                    .addComponent(quantityjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(34, 34, 34)
                                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(quantityjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkOutBtn)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutBtnActionPerformed
        // TODO add your handling code here:
        if (uglyGroceryOrder.getUglyGroceryOrderItemList().size() > 0) {
            householdOrganization.getUglyGroceryMasterOrderCatalog().addOrder(uglyGroceryOrder);
            JOptionPane.showMessageDialog(null, "Order placed  successfully!");
            for (UglyGroceryOrderItem oi : uglyGroceryOrder.getUglyGroceryOrderItemList()) {
                int availQty = oi.getGroceryWorkRequest().getAvailQuantity() - oi.getQuantity();
                oi.getGroceryWorkRequest().setAvailQuantity(availQty);
                oi.getGroceryWorkRequest().getReceiverList().add(householdOrganization);
                if (availQty == 0) {
                    oi.getGroceryWorkRequest().setStatus(StatusEnum.Unavailable);
                }
            }
            uglyGroceryOrder = new FoodOfferOrder();
            refreshOrderTable();
            populateUglyGroceryTable();
            isCheckedOut = true;
            return;
        }
        JOptionPane.showMessageDialog(null, "Your cart is empty!.", "WARNING", JOptionPane.WARNING_MESSAGE);
        return;
    }//GEN-LAST:event_checkOutBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = uglyGroceryTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }

        UglyGroceryWorkRequest selectedProduct = (UglyGroceryWorkRequest) uglyGroceryTable.getValueAt(selectedRow, 3);
        int fetchQty = (Integer) quantityjSpinner.getValue();
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be less than or equal to zero.");
            return;
        }

        try {
            int tempQuantity = 0;
            for (UglyGroceryOrderItem oi : uglyGroceryOrder.getUglyGroceryOrderItemList()) {
                if (oi.getGroceryWorkRequest() == selectedProduct) {
                    tempQuantity = oi.getQuantity();
                    break;
                }
            }
            if (fetchQty <= (selectedProduct.getAvailQuantity() - tempQuantity)) {
                boolean alreadyPresent = false;
                for (UglyGroceryOrderItem oi : uglyGroceryOrder.getUglyGroceryOrderItemList()) {
                    if (oi.getGroceryWorkRequest() == selectedProduct) {
                        oi.setQuantity(fetchQty + oi.getQuantity());
                        alreadyPresent = true;
                        populateUglyGroceryTable();
                        refreshOrderTable();
                        break;
                    }
                }
                if (!alreadyPresent) {
                    uglyGroceryOrder.addUglyGroceryOrderItem(selectedProduct, fetchQty);
                    populateUglyGroceryTable();
                    refreshOrderTable();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Quantity > Availablity.", "WARNING", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid quantity.");
            return;
        }
    }//GEN-LAST:event_addBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTable cartJTable;
    private javax.swing.JButton checkOutBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner quantityjSpinner;
    private javax.swing.JTable uglyGroceryTable;
    // End of variables declaration//GEN-END:variables

    private void populateUglyGroceryTable() {
        DefaultTableModel model = (DefaultTableModel) uglyGroceryTable.getModel();

        model.setRowCount(0);
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof RestaurantOrganization) {
                for (UglyGroceryWorkRequest workRequest : organization.getUglyGroceryWorkQueue().getUglyGroceryWorkRequestList()) {
                    workRequest.checkExpired();
                    if (workRequest.getStatus().equals(StatusEnum.GroceryToSell)) {
                        Object[] row = new Object[4];
                        row[0] = workRequest.getProduct();
                        row[1] = workRequest.getAvailQuantity();
                        row[2] = workRequest.getAmount();
                        row[3] = workRequest;
                        model.addRow(row);
                    }
                }
                break;
            }
        }
    }

    private void refreshOrderTable() {
        DefaultTableModel dtm = (DefaultTableModel) cartJTable.getModel();
        dtm.setRowCount(0);
        for (UglyGroceryOrderItem oi : uglyGroceryOrder.getUglyGroceryOrderItemList()) {
            {
                Object[] row = new Object[3];
                row[0] = oi.getGroceryWorkRequest().getProduct();
                row[1] = oi.getQuantity();
                row[2] = oi.getGroceryWorkRequest().getAmount() * oi.getQuantity();
                dtm.addRow(row);
            }
        }
    }
}
